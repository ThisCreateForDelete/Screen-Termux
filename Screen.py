import base64
exec(base64.b64decode('# _*_ coding: UTF-8 _*_
#Proyek pertama
import os, sys, time
#Color
a = '\033[90m'
m = '\033[91m'
h = '\033[92m'
k = '\033[93m'
b = '\033[94m'
u = '\033[95m'
bl = '\033[96m'
p = '\033[97m'

def ulang():
    login()

def ulang2():
    pilihan()
    tombol_2()

def tulis(santai):
    for xixi in santai + '\n':
        sys.stdout.write(xixi)
	sys.stdout.flush()
	time.sleep(0.1)

def Vanke(nulis):
    for Kial in nulis + '\n':
        sys.stdout.write(Kial)
        sys.stdout.flush()
        time.sleep(0.003)

def Sad():
    muter = ['[\]     ','[/]     ','[-]     ','[\]     ','[/]     ','[-]     ','[\]     ','[/]     ','[-]     ','[\]     ','[/]     ','[-]     ','[\]     ','[/]     ','[-]     ','[\]     ','[/]     ','[-]     ','[\]     ','[/]     ','[-]     ','[\]     ','[/]     ','[-]     ','[\]     ','[/]     ','[-]     ','[\]     ','[/]     ','[-]     ','[\]     ','[/]     ','[-]     ','[\]     ','[/]     ','[-]     ','[\]     ','[/]     ','[-]     ','[\]     ','[/]     ','[-]     ','[\]     ','[/]     ','[-]     ','[\] ']
    for mubeng in muter:
		 print(m+"\r ╔═≫\033[90mTunggu\033[93m "+mubeng),;sys.stdout.flush();time.sleep(0.1)

def login():
	os.system('clear')
	time.sleep(0.1)
	print("\t\033[90m.::\033[91m|\033[96mLogin dulu biar berkah\033[91m|\033[90m::.\033[93m\n")
	Username = raw_input("Username: ")
	Password = raw_input("Password: ")
	if Username == 'Mr.Crazy' and Password == 'Subscribe':
	   time.sleep(0.5)
	   tulis(h+"Login Sucess[✓]")
	   time.sleep(1)
	   lanjut()

	else:
	   time.sleep(0.5)
	   os.system("figlet -f slant \tUdah Subcribe belom? |lolcat")
	   time.sleep(4)
	   os.system('clear')
	   ulang()

def installbahan():
	os.system("pkg install lolcat")
	os.system("pip2 install lolcat")
	os.system("pkg install figlet")
	os.system("pkg install neofetch")
	os.system('clear')
	Vanke(h+"Install Bahan Selesai[✓]")
	time.sleep(0.1)
	print u+"Langsung login ke tools aja"
	time.sleep(2.5)
	menu()
	tombol()

def menu():
	time.sleep(0.5)
	os.system('clear')
	banner()
	print " "
	print m+"[¥]  \033[96mInstall Bahan Dulu Agar Gak Eror\033[91m [¥]"
	print b+"   ≪━─━─━─━─━─━─━─━─◈─━─━─━──━─━─━─━━≫"
	print m+"   ⚔ \033[96m[1.] \033[93mLogin Ke Tools   \033[91m          ⚔"
	print m+"   ⚔ \033[96m[2.] \033[93mInstall Bahan    \033[91m          ⚔"
	print m+"   ⚔ \033[96m[0.] \033[91mExit                       ⚔"
	print b+"   ≪━─━─━─━─━─━─━─━─◈─━─━─━──━─━─━─━━≫"

def tombol():
    try:
	ip = raw_input("   \033[91m▄︻┳一•\033[97m")
	if ip in ['1'] :
		mulai()

	elif ip in ['2'] :
		installbahan()

	elif ip in ['0'] :
		Exit()
	else:
		time.sleep(1)
		print "      \n \033[95m• \033[91mPilih Yang Bener Cok\033[90m ..!!!\n"
		time.sleep(2)
		lanjut()
    except KeyboardInterrupt:
	   print "\033[90mKeluar dari program..."
	   sys.exit()

def Exit():
	time.sleep(0.1)
	os.system('clear')
	time.sleep(0.5)
	os.system("figlet -f slant Welcome To Hell |lolcat")
	time.sleep(1)
	os.system("figlet Thanks To Use My Program.. Haha:v |lolcat")
	time.sleep(2)
	exit

def banner():
	time.sleep(0.5)
	os.system('clear')
	print "\033[97m"
	Vanke(m+" __  __                    ___                             _  _  ")
	Vanke(m+"|  \/  |    _ _           / __|     _ _   __ _      ___   | || | ")
	Vanke(m+"| |\/| |   | '_|    _    | (__     | '_| / _` |    |_ /    \_, | ")
	Vanke(a+"|_|__|_|  _|_|_   _(_)_   \___|   _|_|_  \__,_|   _/__|   _|__/  ")
	Vanke(m+"╭✧✧✧✧✧✧╮_╭✧✧✧✧✧╮_╭✧✧✧✧✧╮_╭✧✧✧✧✧╮_╭✧✧✧✧✧╮_╭✧✧✧✧✧╮_╭✧✧✧✧✧╮_╭✧✧✧✧✧╮ ")
	Vanke(m+"╰─✪──✪─╯‾╰─✪─✪─╯‾╰─✪─✪─╯‾╰─✪─✪─╯‾╰─✪─✪─╯‾╰─✪─✪─╯‾╰─✪─✪─╯‾╰─✪─✪─╯ ")
	print a+"█▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀█"
	print m+"¥                     Author  : Master_Crazy                   ¥"
	print m+"¥               Channel Yt : Masakuata Channel                 ¥"
	print m+"¥            Github : https://github.com/MasterCrazy999        ¥"
	print a+"█▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄█"

def pilihan():
	banner()
	time.sleep(0.5)
	print "\033[97m"
	Vanke(u+"        \033[94m≪━─━─━─━─\033[90m[\033[91mTools Memperganteng Termux\033[90m]\033[94m─━─━─━─━≫  ")
	Vanke(u+"            ╬═════════════════╦══════════════════╬ ")
	Vanke(u+"            ║ \033[91m[\033[96m1\033[91m] \033[93mDragon      \033[95m║ \033[91m[\033[96m6\033[91m] \033[93mLaundry      \033[95m║ ")
	Vanke(u+"            ║ \033[91m[\033[96m2\033[91m] \033[93mRobot       \033[95m║ \033[91m[\033[96m7\033[91m] \033[93mMenara       \033[95m║	")
	Vanke(u+"            ║ \033[91m[\033[96m3\033[91m] \033[93mkastil      \033[95m║ \033[91m[\033[96m8\033[91m] \033[93mHouse        \033[95m║	")
	Vanke(u+"            ║ \033[91m[\033[96m4\033[91m] \033[93mSekolah     \033[95m║ \033[91m[\033[96m9\033[91m] \033[93mTengkorak    \033[95m║	")
	Vanke(u+"            ║ \033[91m[\033[96m5\033[91m] \033[93mKapal       \033[95m║ \033[91m[\033[96m10\033[91m] \033[93mKapal Selam \033[95m║	")
	Vanke(u+"            ╬═════════════════╩══════════════════╬	")
	Vanke(u+"        \033[94m≪━─━─━─━─\033[90m[\033[91mTools Memperganteng Termux\033[90m]\033[94m─━─━─━─━≫  ")

def tombol_2():
	try:
	   ip2 = raw_input("\033[91m▄︻┳一•\033[97m")
	   if ip2 in ['1'] :
		naga()
	   elif ip2 in ['2'] :
		robot()
	   elif ip2 in ['3'] :
		kastil()
	   elif ip2 in ['4'] :
		sekolahan()
	   elif ip2 in ['5'] :
		kapal()
	   elif ip2 in ['6'] :
		jemuran()
	   elif ip2 in ['7'] :
		menara()
	   elif ip2 in ['8'] :
		sale()
	   elif ip2 in ['9'] :
		tengkorak()
	   elif ip2 in ['10'] :
		kapalselam()
	   else:
		time.sleep(1)
		print "      \n \033[95m• \033[91mPilih Yang Bener Cok\033[90m ..!!!\n"
		time.sleep(1.5)
		ulang2()

	except KeyboardInterrupt:
	       print "\033[90mKeluar dari program..."
               sys.exit()

def mulai():
	pilihan()
	tombol_2()

def lanjut():
	menu()
	tombol()

def loginulang():
	time.sleep(2)
	lg = raw_input("\t\033[90m<\033[91m=\033[93m• \033[96mTekan Enter Untuk melihat Hasil \033[93m•\033[91m=\033[90m>")
	os.system('login')

def play():
	login()

#Popeye

def popeye():
	os.system('clear')
	banner()
	print m+"⚔\033[94m╬═════════════════════════════════════════════≫"
	nama = str(raw_input(' \033[94m╚≫ \033[92mNama Buat Ditampilan  \033[93m: '))
	prompt = str(raw_input(' \033[94m╔≫ \033[92mNama Buat Diprompt  \033[93m: '))
	print m+"⚔\033[94m╬═════════════════════════════════════════════≫"
	time.sleep(1)
	print " "
	print " "
	Sad()
	time.sleep(1)
	Door = open("bash.bashrc", "w")
	Door.write('clear')
	Door.write("\necho '\033[97m          ____'")
	Door.write("\necho '\033[97m          \__/        \033[92m = =='")
	Door.write("\necho '\033[92m         `(  `^=_ p \033[94m_\033[92m###\033[94m_'")
	Door.write("\necho '\033[92m          c   /  )  \033[94m|   /'")
	Door.write("\necho '\033[94m   _____- \033[92m//^---~  \033[94m_c  3'")
	Door.write("\necho '\033[94m /  ----^\ /^_\   / --,-'")
	Door.write("\necho '\033[94m(   |  |\033[91m  G\033[94m_| \\_/  ,/'")
	Door.write("\necho '\033[94m|   |  | / \|  `-- /         \033[90m~[ \033[91m"+nama+"\033[90m ]~'")
	Door.write("\necho '\033[92m(((G   \033[94m|-----|'")
	Door.write("\necho '\033[93m      //\033[94m-----\033[93m\\\   '")
	Door.write("\necho '\033[93m     //       \\\   '")
	Door.write("\necho '\033[96m   /   |     |  ^|   '")
	Door.write("\necho '\033[91m   |   |     |   |   '")
	Door.write("\necho '\033[96m   |____|    |____|   '")
	Door.write("\necho '\033[96m  /______)   (_____\   '")
	Door.write("\necho")
	Door.write("\necho")
	Door.write("\n\nPS1='\033[1;34m\]╭───\[\033[1;31m\][ \[\033[1;33m\]"+prompt+"\[\033[1;34m\]•\[\033[1;30m\]\w\[\033[1;31m\] ]")
	Door.write("\n\[\033[1;34m\]╰──╼\[\033[1;31m\]✠\[\033[1;32m\] '")
	Door.close()
	os.system("rm $HOME/../usr/etc/bash.bashrc")
	os.system("cp -f bash.bashrc $HOME/../usr/etc")
	print " "
	print m+" ║"
	print m+" ╠═≫ \033[92mBERHASIL ✓"
	print m+" ║"
	time.sleep(0.5)
	tulis(m+" ╚═≫ \033[93mSubscribe My Channel \033[90mMasakuata Channel")
	time.sleep(1)
	print " "
	loginulang()
	print " "

def jemuran():
	os.system('clear')
	banner()
	print m+"⚔\033[94m╬═════════════════════════════════════════════≫"
        nama = str(raw_input(' \033[94m╚≫ \033[92mNama Buat Ditampilan  \033[93m: '))
        prompt = str(raw_input(' \033[94m╔≫ \033[92mNama Buat Diprompt  \033[93m: '))
        print m+"⚔\033[94m╬═════════════════════════════════════════════≫"
        time.sleep(1)
        print " "
        print " "
        Sad()
	time.sleep(1)
	Door = open("bash.bashrc", "w")
	Door.write('clear')
	Door.write("\necho '\033[91m=======!====!=====!=====!====!===!===!=====!===!===!==== '")
	Door.write("\necho '\033[94m      /`\__/`\  \033[93m /`\   /`\  \033[96m|~| |~| \033[90m /)=I=(\ \033[95m /`¯¯¯`\ '")
	Door.write("\necho '\033[94m     |        | \033[93m|   `-´   | \033[97m| | | |  \033[90m|  :  | \033[95m|   :   | '")
	Door.write("\necho '\033[94m     `-|    |-´ \033[93m`-|     |-´ \033[96m)/\ )/\  \033[90m|  T  \ \033[95m`-| : |-´ '")
	Door.write("\necho '\033[94m       |    |    \033[93m |     |  \033[97m/ \// \/  \033[90m(  |\  | \033[95m  ---´ '")
	Door.write("\necho '\033[94m       `.__.´     \033[93m`.___.´  \033[96m\_/ \_/   \033[90m|  |/  / '")
	Door.write("\necho '\033[94m                                    \033[90m |  /  / '")
	Door.write("\necho '\033[94m                                     \033[90m|  \ /     \033[90m~[\033[91m "+nama+" \033[90m]~ '")
	Door.write("\necho '\033[94m                                    \033[90m `--´` '")
	Door.write("\necho")
	Door.write("\necho")
	Door.write("\n\nPS1='\033[1;34m\]╭───\[\033[1;31m\][ \[\033[1;33m\]"+prompt+"\[\033[1;34m\]•\[\033[1;30m\]\w\[\033[1;31m\] ]")
        Door.write("\n\[\033[1;34m\]╰──╼\[\033[1;31m\]✠\[\033[1;32m\] '")
        Door.close()
	os.system("rm $HOME/../usr/etc/bash.bashrc")
	os.system("cp -f bash.bashrc $HOME/../usr/etc")
	print " "
        print m+" ║"
        print m+" ╠═≫ \033[92mBERHASIL ✓"
        print m+" ║"
        time.sleep(0.5)
        tulis(m+" ╚═≫ \033[93mSubscribe My Channel \033[90mMasakuata Channel")
        time.sleep(1)
        print " "
        loginulang()
        print " "

def robot():
	os.system('clear')
	banner()
	print m+"⚔\033[94m╬═════════════════════════════════════════════≫"
        nama = str(raw_input(' \033[94m╚≫ \033[92mNama Buat Ditampilan  \033[93m: '))
        prompt = str(raw_input(' \033[94m╔≫ \033[92mNama Buat Diprompt  \033[93m: '))
        print m+"⚔\033[94m╬═════════════════════════════════════════════≫"
        time.sleep(1)
        print " "
        print " "
        Sad()
	time.sleep(1)
	Door = open("bash.bashrc", "w")
	Door.write('clear')
	Door.write("\necho '\033[90m     ____          ____ '")
	Door.write("\necho '\033[90m    |oooo|        |oooo| '")
	Door.write("\necho '\033[90m    |oooo|\033[91m .----. \033[90m|oooo| '")
	Door.write("\necho '\033[90m    |Oooo|\033[91m/\_||_/\\\033[90m|oooO| '")
	Door.write("\necho '\033[90m    `----´\033[91m / __ \\\033[90m `----´ '")
	Door.write("\necho '\033[94m    ,/ |#|/\/__\/\|#| \, '")
	Door.write("\necho '\033[94m   /  \|#|| |/\| ||#|/  \ '")
	Door.write("\necho '\033[94m  / \_/|_|| |/\| ||_|\_/ \ '")
	Door.write("\necho '\033[91m |_\/    o\=----=/o    \/_| '")
	Door.write("\necho '\033[91m <_>      |=\__/=|      <_> '")
	Door.write("\necho '\033[91m <_>      |------|      <_> '")
	Door.write("\necho '\033[94m | |   ___|======|___   | | '")
	Door.write("\necho '\033[94m//\\\  / |O|======|O| \  //\\\ '")
	Door.write("\necho '\033[94m|  |  | |O+------+O| |  |  | '")
	Door.write("\necho '\033[91m|\/|  \_+/        \+_/  |\/| '")
	Door.write("\necho '\033[91m\__/  _|||        |||_  \__/ '")
	Door.write("\necho '\033[91m      | ||        || | '")
	Door.write("\necho '\033[94m     [==|]        [|==] '")
	Door.write("\necho '\033[94m     [===]        [===] '")
	Door.write("\necho '\033[94m      >_<          >_< '")
	Door.write("\necho '\033[91m     || ||        || || '")
	Door.write("\necho '\033[91m     || ||        || || '")
	Door.write("\necho '\033[91m     || ||        || ||   \033[90m~[ \033[91m"+nama+" \033[90m]~ '")
	Door.write("\necho '\033[94m   __|\_/|__    __|\_/|__ '")
	Door.write("\necho '\033[94m  /___n_n___\  /___n_n___\ '")
	Door.write("\necho")
	Door.write("\necho")
	Door.write("\n\nPS1='\033[1;34m\]╭───\[\033[1;31m\][ \[\033[1;33m\]"+prompt+"\[\033[1;34m\]•\[\033[1;30m\]\w\[\033[1;31m\] ]")
        Door.write("\n\[\033[1;34m\]╰──╼\[\033[1;31m\]✠\[\033[1;32m\] '")
	Door.close()
	os.system("rm $HOME/../usr/etc/bash.bashrc")
	os.system("cp -f bash.bashrc $HOME/../usr/etc")
	print " "
        print m+" ║"
        print m+" ╠═≫ \033[92mBERHASIL ✓"
        print m+" ║"
        time.sleep(0.5)
        tulis(m+" ╚═≫ \033[93mSubscribe My Channel \033[90mMasakuata Channel")
        time.sleep(1)
	print " "
        loginulang()
	print " "

def kastil():
	os.system('clear')
	banner()
	print m+"⚔\033[94m╬═════════════════════════════════════════════≫"
        nama = str(raw_input(' \033[94m╚≫ \033[92mNama Buat Ditampilan  \033[93m: '))
        prompt = str(raw_input(' \033[94m╔≫ \033[92mNama Buat Diprompt  \033[93m: '))
        print m+"⚔\033[94m╬═════════════════════════════════════════════≫"
        time.sleep(1)
        print " "
        print " "
        Sad()
        time.sleep(1)
	Door = open("bash.bashrc", "w")
	Door.write('clear')
	Door.write("\necho '\033[90m    |\033[97m>>>                                                   \033[90m   |\033[97m>>> '")
	Door.write("\necho '\033[90m    |                \033[90m     |\033[97m>>>      \033[90m    |\033[97m>>>  \033[90m                | '")
	Door.write("\necho '\033[91m    *         \033[90m            |             |       \033[91m              * '")
	Door.write("\necho '\033[91m   / \                    *             *                    / \ '")
	Door.write("\necho '\033[91m  /\033[92m___\033[91m\             \033[92m    _\033[91m/ \           / \\\033[92m_         \033[91m        /\033[92m___\033[91m\ '")
	Door.write("\necho '\033[92m  [   ]                |\033[91m/   \\\033[92m_________\033[91m/   \\\033[92m|                [   ] '")
	Door.write("\necho '\033[92m  [ I ]         \033[91m       /     \       /     \         \033[92m       [ I ] '")
	Door.write("\necho '\033[92m  [   ]_ _ _     \033[91m     /       \     /       \   \033[92m       _ _ _[   ] '")
	Door.write("\necho '\033[92m  [   ] U U |        {#########}   {#########}        | U U [   ] '")
	Door.write("\necho '\033[92m  [   ]====/          \=======/     \=======/          \====[   ] '")
	Door.write("\necho '\033[92m  [   ]    |           |   I |_ _ _ _| I   |           |    [   ] '")
	Door.write("\necho '\033[92m  [___]    |_ _ _ _ _ _|     | U U U |     |_ _ _ _ _ _|    [___] '")
	Door.write("\necho '\033[92m  \===/  I | U U U U U |     |=======|     | U U U U U | I  \===/ '")
	Door.write("\necho '\033[92m   \=/     |===========| I   | + G + |   I |===========|     \=/ '")
	Door.write("\necho '\033[92m    |  I   |           |     |_______|     |           |   I  | '")
	Door.write("\necho '\033[92m    |      |           |     |||||||||     |           |      | '")
	Door.write("\necho '\033[92m    |      |           |   I ||vvvvv|| I   |           |      |'")
	Door.write("\necho '\033[92m_-_-|______|-----------|_____||     ||_____|-----------|______|-_-_ '")
	Door.write("\necho '\033[92m   /________\         /______||     ||______\         /________\ '")
	Door.write("\necho '\033[92m          |__________|-------|________\_____/________|-------|__________| '")
	Door.write("\necho")
	Door.write("\necho")
	Door.write("\necho '\033[90m                                                            ~[ \033[91m"+nama+" \033[90m]~ '")
	Door.write("\necho")
	Door.write("\n\nPS1='\033[1;34m\]╭───\[\033[1;31m\][ \[\033[1;33m\]"+prompt+"\[\033[1;34m\]•\[\033[1;30m\]\w\[\033[1;31m\] ]")
        Door.write("\n\[\033[1;34m\]╰──╼\[\033[1;31m\]✠\[\033[1;32m\] '")
	Door.close()
        os.system("rm $HOME/../usr/etc/bash.bashrc")
        os.system("cp -f bash.bashrc $HOME/../usr/etc")
        print " "
        print m+" ║"
        print m+" ╠═≫ \033[92mBERHASIL ✓"
        print m+" ║"
        time.sleep(0.5)
        tulis(m+" ╚═≫ \033[93mSubscribe My Channel \033[90mMasakuata Channel")
        time.sleep(1)
        print " "
        loginulang()
        print " "

def kapal():
	os.system('clear')
	banner()
	print m+"⚔\033[94m╬═════════════════════════════════════════════≫"
        nama = str(raw_input(' \033[94m╚≫ \033[92mNama Buat Ditampilan  \033[93m: '))
        prompt = str(raw_input(' \033[94m╔≫ \033[92mNama Buat Diprompt  \033[93m: '))
        print m+"⚔\033[94m╬═════════════════════════════════════════════≫"
        time.sleep(1)
        print " "
        print " "
        Sad()
	time.sleep(1)
	Door = open("bash.bashrc", "w")
	Door.write('clear')
	Door.write("\necho '\033[97m     ~~~        \033[90m     | '")
	Door.write("\necho '\033[97m~~~~     ~~~~    \033[91m  -----                  \033[90m  | '")
	Door.write("\necho '\033[97m     ~~~      \033[91m     )___(                  ----- '")
	Door.write("\necho '\033[90m                     |           \033[91m         )___( '")
	Door.write("\necho '\033[91m                 ---------       \033[90m           | '")
	Door.write("\necho '\033[91m                /         \              ------- '")
	Door.write("\necho '\033[91m               /___________\            /       \ '")
	Door.write("\necho '\033[90m                     |           \033[91m      /_________\ '")
	Door.write("\necho '\033[91m              ---------------     \033[90m          | '")
	Door.write("\necho '\033[91m             /               \        ------------- '")
	Door.write("\necho '\033[91m            /                 \      /             \          \033[90m  ~[\033[91m "+nama+" \033[90m]~ '")
	Door.write("\necho '\033[91m           /___________________\    /_______________\ '")
	Door.write("\necho '\033[94m         ____________\033[90m|\033[94m______________________\033[90m|\033[94m__________ '")
	Door.write("\necho '\033[94m          \_                                        _/ '")
	Door.write("\necho '\033[94m            \______________________________________/ '")
	Door.write("\necho '\033[96m     ~~..             ...~~~.           ....~~~...     ..~ '")
	Door.write("\necho")
	Door.write("\necho")
	Door.write("\n\nPS1='\033[1;34m\]╭───\[\033[1;31m\][ \[\033[1;33m\]"+prompt+"\[\033[1;34m\]•\[\033[1;30m\]\w\[\033[1;31m\] ]")
        Door.write("\n\[\033[1;34m\]╰──╼\[\033[1;31m\]✠\[\033[1;32m\] '")
	Door.close()
	os.system("rm $HOME/../usr/etc/bash.bashrc")
	os.system("cp -f bash.bashrc $HOME/../usr/etc")
	print " "
        print m+" ║"
        print m+" ╠═≫ \033[92mBERHASIL ✓"
        print m+" ║"
        time.sleep(0.5)
        tulis(m+" ╚═≫ \033[93mSubscribe My Channel \033[90mMasakuata Channel")
        time.sleep(1)
        print " "
        loginulang()
        print " "

def menara():
	os.system('clear')
	banner()
	print m+"⚔\033[94m╬═════════════════════════════════════════════≫"
        nama = str(raw_input(' \033[94m╚≫ \033[92mNama Buat Ditampilan  \033[93m: '))
        prompt = str(raw_input(' \033[94m╔≫ \033[92mNama Buat Diprompt  \033[93m: '))
        print m+"⚔\033[94m╬═════════════════════════════════════════════≫"
        time.sleep(1)
        print " "
        print " "
        Sad()
        time.sleep(1)
	Door = open("bash.bashrc", "w")
	Door.write('clear')
	Door.write("\necho '\033[90m                                                |\033[97m>>> '")
	Door.write("\necho '\033[90m                                                | '")
	Door.write("\necho '\033[92m                                            _  _\033[90m|\033[92m_  _ '")
	Door.write("\necho '\033[92m                                           |;|_|;|_|;| '")
	Door.write("\necho '\033[92m                                           \\.    .  / '")
	Door.write("\necho '\033[92m                                            \\:  .  / '")
	Door.write("\necho '\033[92m                                             ||:   | '")
	Door.write("\necho '\033[92m                                             ||:.  | '")
	Door.write("\necho '\033[92m                                             ||:  .| '")
	Door.write("\necho '\033[92m                                             ||:   |  \033[96m     \,/ '")
	Door.write("\necho '\033[92m                                             ||: , |      \033[96m      /`\ '")
	Door.write("\necho '\033[92m                                             ||:   | '")
	Door.write("\necho '\033[92m                                             ||: . | '")
	Door.write("\necho '\033[91m              __                            _\033[92m||\033[91m_ \033[92m  | '")
	Door.write("\necho '\033[91m     ____--`~    `--~~__            __ ----~    ~`---,              ___ '")
	Door.write("\necho '\033[91m-~--~                   ~---__ ,--~´                  ~~----_____-~`   `~----~~ '")
	Door.write("\necho")
	Door.write("\necho '\033[90m                                                       ~[\033[91m "+nama+" \033[90m]~ '")
	Door.write("\necho")
	Door.write("\necho")
	Door.write("\n\nPS1='\033[1;34m\]╭───\[\033[1;31m\][ \[\033[1;33m\]"+prompt+"\[\033[1;34m\]•\[\033[1;30m\]\w\[\033[1;31m\] ]")
        Door.write("\n\[\033[1;34m\]╰──╼\[\033[1;31m\]✠\[\033[1;32m\] '")
        Door.close()
	os.system("rm $HOME/../usr/etc/bash.bashrc")
	os.system("cp -f bash.bashrc $HOME/../usr/etc")
	print " "
        print m+" ║"
        print m+" ╠═≫ \033[92mBERHASIL ✓"
        print m+" ║"
        time.sleep(0.5)
        tulis(m+" ╚═≫ \033[93mSubscribe My Channel \033[90mMasakuata Channel")
        time.sleep(1)
        print " "
        loginulang()
        print " "

def sekolahan():
	os.system('clear')
	banner()
	print m+"⚔\033[94m╬═════════════════════════════════════════════≫"
        nama = str(raw_input(' \033[94m╚≫ \033[92mNama Buat Ditampilan  \033[93m: '))
        prompt = str(raw_input(' \033[94m╔≫ \033[92mNama Buat Diprompt  \033[93m: '))
        print m+"⚔\033[94m╬═════════════════════════════════════════════≫"
        time.sleep(1)
        print " "
        print " "
        Sad()
        time.sleep(1)
	Door = open("bash.bashrc", "w")
	Door.write('clear')
	Door.write("\necho '              /\033[90m'")
	Door.write("\necho '   \033[90m          \   \033[91m   _[]_   \033[90m      /'")
	Door.write("\necho '\033[91m     __[]___[]___[]/____\_[]_ \033[90m   \'")
	Door.write("\necho '\033[91m    /______________|[][]|____\  \033[90m/'")
	Door.write("\necho '\033[91m    |[][]|[][]|[][]|[][]|[][]|__[]_'")
	Door.write("\necho '\033[91m    |  /\|/\  |  /\|  /\|/\  |_____\'")
	Door.write("\necho '\033[91m    |[]|||||[]|[]|||[]|||||[]|[_]|||'")
	Door.write("\necho '\033[93m  ==================================='")
	Door.write("\necho '\033[97m  -  -  -  -  -  -  -  -  -  -  -  -  -'")
	Door.write("\necho '\033[93m=========================================   \033[90m~[ \033[91m"+nama+" \033[90m]~'")
	Door.write("\necho")
	Door.write("\necho")
	Door.write("\n\nPS1='\033[1;34m\]╭───\[\033[1;31m\][ \[\033[1;33m\]"+prompt+"\[\033[1;34m\]•\[\033[1;30m\]\w\[\033[1;31m\] ]")
        Door.write("\n\[\033[1;34m\]╰──╼\[\033[1;31m\]✠\[\033[1;32m\] '")
	Door.close()
	os.system("rm $HOME/../usr/etc/bash.bashrc")
	os.system("cp -f bash.bashrc $HOME/../usr/etc")
	print " "
        print m+" ║"
        print m+" ╠═≫ \033[92mBERHASIL ✓"
        print m+" ║"
        time.sleep(0.5)
        tulis(m+" ╚═≫ \033[93mSubscribe My Channel \033[90mMasakuata Channel")
        time.sleep(1)
        print " "
        loginulang()
        print " "

def sale():
	os.system('clear')
        banner()
        print m+"⚔\033[94m╬═════════════════════════════════════════════≫"
        nama = str(raw_input(' \033[94m╚≫ \033[92mNama Buat Ditampilan  \033[93m: '))
        prompt = str(raw_input(' \033[94m╔≫ \033[92mNama Buat Diprompt  \033[93m: '))
        print m+"⚔\033[94m╬═════════════════════════════════════════════≫"
        time.sleep(1)
        print " "
        print " "
        Sad()
	time.sleep(1)
        Door = open("bash.bashrc", "w")
        Door.write('clear')
	Door.write("\necho '\033[90m          |'")
	Door.write("\necho '\033[90m         |\033[96m _\033[91m   _._'")
	Door.write("\necho '\033[96m          |\033[91m_\033[96m|\033[91m-’_~_`-._'")
	Door.write("\necho '\033[91m       _.-’-_~_-~_-~-_`-._ '")
	Door.write("\necho '\033[91m   _.-’_~-_~-_-~-_~_~-_~-_`-._ '")
	Door.write("\necho '\033[91m  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ '")
	Door.write("\necho '\033[93m    |  \033[94m[]  []   []   []  []\033[93m | '")
	Door.write("\necho '\033[93m    |      \033[91m     __ \033[94m   ___  \033[93m |           \033[90m~[ \033[91m"+nama+" \033[90m]~ '")
	Door.write("\necho '\033[95m  ._\033[93m| \033[94m []  [] \033[91m |\033[94m .\033[91m| \033[94m [___]\033[93m  |\033[95m_._._._._._._._._._._._._._._._._. '")
	Door.write("\necho '\033[95m  |=\033[93m|________\033[90m()\033[91m|__|\033[90m()\033[93m_______|\033[95m=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=| '")
	Door.write("\necho '\033[92m^^^^^^^^^^^^^^^ \033[97m===\033[92m ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ '")
	Door.write("\necho '\033[91m    _______   \033[97m   === '")
	Door.write("\necho '\033[91m   <_\033[96mVanke\033[91m_> \033[97m      === '")
	Door.write("\necho '\033[91m      ^|^    \033[97m         === '")
	Door.write("\necho '\033[91m       |       \033[97m          === '")
	Door.write("\necho")
        Door.write("\necho")
        Door.write("\n\nPS1='\033[1;34m\]╭───\[\033[1;31m\][ \[\033[1;33m\]"+prompt+"\[\033[1;34m\]•\[\033[1;30m\]\w\[\033[1;31m\] ]")
        Door.write("\n\[\033[1;34m\]╰──╼\[\033[1;31m\]✠\[\033[1;32m\] '")
        Door.close()
	os.system("rm $HOME/../usr/etc/bash.bashrc")
	os.system("cp -f bash.bashrc $HOME/../usr/etc")
	print " "
        print m+" ║"
        print m+" ╠═≫ \033[92mBERHASIL ✓"
        print m+" ║"
        time.sleep(0.5)
        tulis(m+" ╚═≫ \033[93mSubscribe My Channel \033[90mMasakuata Channel")
        time.sleep(1)
        print " "
        loginulang()
        print " "

def kapalselam():
	os.system('clear')
	banner()
        print m+"⚔\033[94m╬═════════════════════════════════════════════≫"
        nama = str(raw_input(' \033[94m╚≫ \033[92mNama Buat Ditampilan  \033[93m: '))
        prompt = str(raw_input(' \033[94m╔≫ \033[92mNama Buat Diprompt  \033[93m: '))
        print m+"⚔\033[94m╬═════════════════════════════════════════════≫"
        time.sleep(1)
        print " "
        print " "
        Sad()
        time.sleep(1)
        Door = open("bash.bashrc", "w")
        Door.write('clear')
	Door.write("\necho '\033[92m                     _ '")
	Door.write("\necho '\033[92m                    | \ '")
	Door.write("\necho '\033[92m                     `.| '")
	Door.write("\necho '\033[96m     _-   _-    _-  _-\033[92m|| \033[96m   _-    _-  _-   _-    _-    _- '")
	Door.write("\necho '\033[96m       _-    _-   -\033[92m __||___ \033[96m   _-       _-    _-    _- '")
	Door.write("\necho '\033[96m    _-   _-    _- \033[92m | \033[97m  _ \033[92m  |  \033[96m     _-   _-    _- '")
	Door.write("\necho '\033[96m      _-    _-  \033[97m  /_) (_) (_\   \033[96m     _-    _-       _- '")
	Door.write("\necho '\033[92m              _.-´           `-._      ________     \033[96m  _- '")
	Door.write("\necho '\033[92m        _..--´                   `-..´       .´'")
	Door.write("\necho '\033[92m    _.-´ \033[93m o/o   \033[90m        |      \033[93m   o/o\033[92m`-..__.´       \033[96m ~  ~'")
	Door.write("\necho '\033[92m .-´    \033[93m  o|o    \033[90m   --\033[91mVanke\033[90m--  \033[93m   o|o\033[92m      `.\033[94m._.  //\033[96m ~  ~'")
	Door.write("\necho '\033[92m `-._   \033[93m  o|o     \033[90m      |      \033[93m   o|o        \033[94m|||<|||\033[96m~  ~          \033[90m~[ \033[91m"+nama+" \033[90m]~'")
	Door.write("\necho '\033[92m     `-.__\033[93mo\o                  \033[93m   o|o\033[92m       .\033[94m´-´  \\\033[96m ~  ~'")
	Door.write("\necho '\033[92m          `-.______________________\_...-```.      \033[96m ~  ~'")
	Door.write("\necho '\033[92m                                    `._______`.'")
	Door.write("\necho")
	Door.write("\necho")
	Door.write("\n\nPS1='\033[1;34m\]╭───\[\033[1;31m\][ \[\033[1;33m\]"+prompt+"\[\033[1;34m\]•\[\033[1;30m\]\w\[\033[1;31m\] ]")
	Door.write("\n\[\033[1;34m\]╰──╼\[\033[1;31m\]✠\[\033[1;32m\] '")
	Door.close()
        os.system("rm $HOME/../usr/etc/bash.bashrc")
        os.system("cp -f bash.bashrc $HOME/../usr/etc")
        print " "
        print m+" ║"
        print m+" ╠═≫ \033[92mBERHASIL ✓"
        print m+" ║"
        time.sleep(0.5)
        tulis(m+" ╚═≫ \033[93mSubscribe My Channel \033[90mMasakuata Channel")
        time.sleep(1)
        print " "
        loginulang()
        print " "
def tengkorak():
	os.system('clear')
        banner()
        print m+"⚔\033[94m╬═════════════════════════════════════════════≫"
        nama = str(raw_input(' \033[94m╚≫ \033[92mNama Buat Ditampilan  \033[93m: '))
        prompt = str(raw_input(' \033[94m╔≫ \033[92mNama Buat Diprompt  \033[93m: '))
        print m+"⚔\033[94m╬═════════════════════════════════════════════≫"
        time.sleep(1)
        print " "
        print " "
        Sad()
        time.sleep(1)
        Door = open("bash.bashrc", "w")
        Door.write('clear')
	Door.write("\necho '\033[91m                       .:::!~!!!!!:.'")
        Door.write("\necho '                    .xUHWH!! !!?M88WHX:.'")
        Door.write("\necho '                  .X*#M@&!!  !X!M&&&&&&WWx:.'")
        Door.write("\necho '                 :!!!!!!?H! :!&!&&&&&&&&&&8X:'")
        Door.write("\necho '                !!~  ~:~!! :~!&!#&&&&&&&&&&8X:'")
        Door.write("\necho '               :!~::!H!<   ~.U&X!?R&&&&&&&&MM!'")
        Door.write("\necho '               ~!~!!!!~~ .:XW&&&U!!?&&&&&&RMM!'")
        Door.write("\necho '                 !:~~~ .:!MST#&&&&WX??#MRRMMM!'")
        Door.write("\necho '                 ~?WuxiW*`   `√#&&&&8!!!!??!!!'")
        Door.write("\necho '               :X- M&&&&       `rT#&T~!8&WUXU~'")
        Door.write("\necho '              :%`  ~#&&&m:    \033[95m✪   \033[91m~!~ ?&&&&&&'")
        Door.write("\necho '            :!`.-   ~T&&&&8xx.  .xWW- ~x&&&&&'")
        Door.write("\necho ' .......   -~~:<` !    ~?T#&&@@W@*?&&   \033[95m✪  \033[91m/`'")
        Door.write("\necho '\033[91mV \033[91m|W&@@M!!! .!~~ !!     .:XUW&W!~ `&~:    :'")
        Door.write("\necho '\033[90mA \033[91m|#&~~`.:x%`!!  !H:   !WM&&&&Ti.: .!WUn+!`'")
        Door.write("\necho '\033[91mN \033[91m|:::~:!!`:X~ .: ?H.!u °&&&B&&&!W:U!T&&M~'")
        Door.write("\necho '\033[90mK \033[91m|.~~   :X@!.-~   ?@WTWo(`*&&&W&TH&! `'")
        Door.write("\necho '\033[91mE \033[91m|Wi.~!X$?!-~    / ?&&&B&Wu(`**&RM!'")
        Door.write("\necho ' .......         /   ~&&&&&B&&en:``\033[90m        \033[90m~[\033[91m "+nama+" \033[90m]~'")
        Door.write("\necho '\033[91m                     ~`##*&&&&M~'")
        Door.write("\necho")
	Door.write("\necho")
	Door.write("\n\nPS1='\033[1;34m\]╭───\[\033[1;31m\][ \[\033[1;33m\]"+prompt+"\[\033[1;34m\]•\[\033[1;30m\]\w\[\033[1;31m\] ]")
        Door.write("\n\[\033[1;34m\]╰──╼\[\033[1;31m\]✠\[\033[1;32m\] '")
        Door.close()
        os.system("rm $HOME/../usr/etc/bash.bashrc")
        os.system("cp -f bash.bashrc $HOME/../usr/etc")
        print " "
        print m+" ║"
        print m+" ╠═≫ \033[92mBERHASIL ✓"
        print m+" ║"
        time.sleep(0.5)
        tulis(m+" ╚═≫ \033[93mSubscribe My Channel \033[90mMasakuata Channel")
        time.sleep(1)
        print " "
        loginulang()
        print " "

def naga():
	os.system('clear')
        banner()
        print m+"⚔\033[94m╬═════════════════════════════════════════════≫"
        nama = str(raw_input(' \033[94m╚≫ \033[92mNama Buat Ditampilan  \033[93m: '))
        prompt = str(raw_input(' \033[94m╔≫ \033[92mNama Buat Diprompt  \033[93m: '))
        print m+"⚔\033[94m╬═════════════════════════════════════════════≫"
        time.sleep(1)
        print " "
        print " "
        Sad()
        time.sleep(1)
        Door = open("bash.bashrc", "w")
        Door.write('clear')
        Door.write("\necho '\033[94m                      ______________'")
        Door.write("\necho '                ,===:.,            `-._'")
        Door.write("\necho '                `:.`---.__         `-._'")
        Door.write("\necho '                  `:.     `--.         `.'")
        Door.write("\necho '                    \.        `.         `.'")
        Door.write("\necho '  \033[91m          (,,(,  \033[90m  \.         `.   ____,-`.,'")
        Door.write("\necho '  \033[91m       (,      `/ \033[90m  \.   ,--.___`.'")
        Door.write("\necho '  \033[91m   ,  ,  ,--.   `, \033[90m  \. ;`'")
        Door.write("\necho '  \033[91m    `{\033[94m@\033[91m,{     \  :  \033[90m  \ ;       \033[90m~[ \033[91m"+nama+"\033[90m ]~'")
        Door.write("\necho ' \033[91m       V,,     /  /  \033[90m  //'")
        Door.write("\necho ' \033[91m       j;;    /  ,  ,-\033[90m//\033[91m.    ,---.      ,'")
	Door.write("\necho ' \033[91m       \;    /  ,  /  _  \  /  _  \   , /'")
        Door.write("\necho '  \033[91m            \   `   / \  `   / \  `.  /'")
        Door.write("\necho '   \033[91m            `.___,/   `.__,/   `.__,/'")
        Door.write("\necho")
	Door.write("\necho")
        Door.write("\n\nPS1='\033[1;34m\]╭───\[\033[1;31m\][ \[\033[1;33m\]"+prompt+"\[\033[1;34m\]•\[\033[1;30m\]\w\[\033[1;31m\] ]")
        Door.write("\n\[\033[1;34m\]╰──╼\[\033[1;31m\]✠\[\033[1;32m\] '")
        Door.close()
	os.system("rm $HOME/../usr/etc/bash.bashrc")
        os.system("cp -f bash.bashrc $HOME/../usr/etc")
        print " "
        print m+" ║"
        print m+" ╠═≫ \033[92mBERHASIL ✓"
        print m+" ║"
        time.sleep(0.5)
        tulis(m+" ╚═≫ \033[93mSubscribe My Channel \033[90mMasakuata Channel")
        time.sleep(1)
        print " "
        loginulang()
        print " "

if __name__=='__main__':
        play()
'))
